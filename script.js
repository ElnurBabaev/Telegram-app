/* =====================================================
   TELEGRAM SCHOOL MINI‚ÄëAPP (frontend, localStorage) v2.4
   -----------------------------------------------------
   –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç: –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –Ω–∞–≥—Ä–∞–¥—ã, —Ä–µ–π—Ç–∏–Ω–≥,
   –∞–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª—å, —Ñ–ª–µ—à‚Äë–∞–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏.
   =====================================================*/

/***** –ì–õ–û–ë–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï *****/
const urlParams = new URLSearchParams(window.location.search);
const isAdmin   = urlParams.get('admin') === 'true';

let events        = JSON.parse(localStorage.getItem('events')        || '[]');
let registrations = JSON.parse(localStorage.getItem('registrations') || '[]');
let allUsers      = JSON.parse(localStorage.getItem('allUsers')      || '[]');

const savedUserData = JSON.parse(localStorage.getItem('userData') || 'null');
let currentUser     = savedUserData;

const ACHIEVEMENTS = [
  { threshold:50,  title:'–ù–æ–≤–∏—á–æ–∫',     emoji:'ü•â' },
  { threshold:100, title:'–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', emoji:'ü•à' },
  { threshold:200, title:'–ü—Ä–æ—Ñ–∏',       emoji:'ü•á' },
];
let earnedAch = JSON.parse(localStorage.getItem('achievements') || '[]');

const rewards = [
  { id:1, title:'–ë–ª–æ–∫–Ω–æ—Ç',             cost:80  },
  { id:2, title:'–¢–µ—Ä–º–æ–∫—Ä—É–∂–∫–∞',         cost:120 },
  { id:3, title:'–§—É—Ç–±–æ–ª–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º',cost:200 },
];

/***** –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø *****/
if (isAdmin) document.getElementById('admin-add-event').style.display='block';

/***** –¢–û–°–¢–´ *****/
function showToast(msg,type='success',ms=2200){
  const t=document.getElementById('toast');
  if(!t) return;
  t.textContent=msg; t.style.display='block';
  const colors={success:'#10b981',error:'#ef4444',warning:'#f59e0b',info:'#2563eb'};
  t.style.backgroundColor = colors[type] || colors.success;
  t.style.color = (type==='warning')?'#000':'#fff';
  clearTimeout(t._hide);
  t._hide=setTimeout(()=>{t.style.display='none';},ms);
}

/***** –ü–†–û–§–ò–õ–¨ *****/
function saveUserInfo(){
  const fullName=document.getElementById('fullNameInput').value.trim();
  const className=document.getElementById('classInput').value.trim();
  if(!fullName||!className) return showToast('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!','warning');

  currentUser={fullName, class:className, points:0, receivedRewards:[]};
  localStorage.setItem('userData',JSON.stringify(currentUser));
  document.getElementById('user-info-modal').style.display='none';

  if(!allUsers.some(u=>u.fullName===fullName && u.class===className)){
    allUsers.push(currentUser);
    localStorage.setItem('allUsers',JSON.stringify(allUsers));
  }

  updateProfileInfo(currentUser);
  showSection('events');
}

function updateProfileInfo(user){
  document.getElementById('profileName').textContent   = user.fullName;
  document.getElementById('profileClass').textContent  = user.class;
  document.getElementById('profilePoints').textContent = user.points || 0;

  checkAchievements(user.points||0);
  const achUl=document.getElementById('achievements-list');
  achUl.innerHTML='';
  earnedAch.forEach(th=>{
    const a=ACHIEVEMENTS.find(x=>x.threshold===th);
    const li=document.createElement('li');
    li.className='achievement-badge';
    li.textContent=`${a.emoji} ${a.title} (${th}¬†–±.)`;
    achUl.appendChild(li);
  });

  const rewardList=document.getElementById('reward-history');
  rewardList.innerHTML='';
  if(!user.receivedRewards||user.receivedRewards.length===0){
    rewardList.innerHTML='<li>–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥</li>';
  }else{
    user.receivedRewards.forEach(id=>{
      const r=rewards.find(x=>x.id===id);
      const li=document.createElement('li');
      li.textContent=r?r.title:'‚Äî';
      rewardList.appendChild(li);
    });
  }
}

function checkAchievements(points){
  ACHIEVEMENTS.forEach(a=>{
    if(points>=a.threshold && !earnedAch.includes(a.threshold)){
      earnedAch.push(a.threshold);
      localStorage.setItem('achievements',JSON.stringify(earnedAch));
      showToast(`–ù–æ–≤–∞—è —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: ${a.emoji} ${a.title}!`);
    }
  });
}

function toggleTheme(){
  const d=document.documentElement;
  const dark = d.classList.toggle('dark');
  localStorage.setItem('theme', dark?'dark':'light');
  document.getElementById('themeToggle').textContent = dark?'‚òÄÔ∏è':'üåô';
}
/* –ø—Ä–∏–º–µ–Ω—è—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Ç–µ–º—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ */
document.addEventListener('DOMContentLoaded',()=>{
  if(localStorage.getItem('theme')==='dark'){
    document.documentElement.classList.add('dark');
    document.getElementById('themeToggle').textContent='‚òÄÔ∏è';
  }
});

function renderClassRating(){
  const body = document.querySelector('#class-table tbody');
  body.innerHTML='';
  /* –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ */
  const byClass = {};
  allUsers.forEach(u=>{
    if(!byClass[u.class]) byClass[u.class]=[];
    byClass[u.class].push(u.points||0);
  });
  /* –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ {klass, avg, count} */
  const rows = Object.entries(byClass).map(([klass,arr])=>{
    const avg = Math.round(arr.reduce((s,x)=>s+x,0)/arr.length);
    return {klass, avg, count:arr.length};
  }).sort((a,b)=>b.avg-a.avg);               // –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–µ–≥–æ

  rows.forEach((r,idx)=>{
    const tr=document.createElement('tr');
    tr.innerHTML =
      `<td>${idx===0?'üèÜ':idx+1}</td><td>${r.klass}</td><td>${r.avg}</td><td>${r.count}</td>`;
    body.appendChild(tr);
  });
}
/* –≤—ã–∑—ã–≤–∞–µ–º –µ—ë –≤–º–µ—Å—Ç–µ —Å renderLeaderboard() */
function renderLeaderboard(){
  /* ‚Ä¶—Å—Ç–∞—Ä—ã–π –∫–æ–¥ –ª–∏—á–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞‚Ä¶ */
  renderClassRating();
}


/***** –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø *****/
function renderEventsList(){
  const list=document.getElementById('events-list');
  list.innerHTML='';
  if(events.length===0){
    list.innerHTML='<p style="margin:0;color:#6b7280">–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</p>';
    return;
  }
  events.forEach(ev=>{
    const isReg=registrations.some(r=>r.eventId===ev.id && r.fullName===currentUser?.fullName);
    const li=document.createElement('li');
    li.dataset.eventId=ev.id;
    li.innerHTML=`
      <div>
        <h3>${ev.title}</h3>
        <div class="date">üìÖ ${ev.date}</div>
        <div class="points">+${ev.points}¬†–±–∞–ª–ª–æ–≤</div>
      </div>
      <div class="card-actions">
        ${isReg ? `<button class="btn" onclick="cancelRegistration(${ev.id})">–û—Ç–º–µ–Ω–∏—Ç—å</button>`
                 : `<button class="btn" onclick="registerForEvent(${ev.id})">–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å</button>`}
        ${isAdmin? `<button class="btn admin-btn" onclick="openAdminView(${ev.id})">–ó–∞—è–≤–∫–∏</button>`:''}
      </div>`;
    list.appendChild(li);
  });
}

function registerForEvent(eventId){
  if(!currentUser) return showToast('–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ!','warning');
  if(registrations.some(r=>r.eventId===eventId && r.fullName===currentUser.fullName))
    return showToast('–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã!','warning');

  registrations.push({eventId, fullName:currentUser.fullName, class:currentUser.class, attended:false});
  localStorage.setItem('registrations',JSON.stringify(registrations));

    // ‚Üì  —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º HTML‚Äë—Å–ø–∏—Å–æ–∫
    renderEventsList();

    // ‚Üì  —Ç–µ–ø–µ—Ä—å –±–µ—Ä—ë–º ¬´—Å–≤–µ–∂—É—é¬ª –∫–∞—Ä—Ç–æ—á–∫—É –∏ –º–∏–≥–∞–µ–º
    const card = document.querySelector(`[data-event-id='${eventId}']`);
    if (card) {
      card.classList.add('flash-success');
      card.addEventListener('animationend', () =>
        card.classList.remove('flash-success'), { once:true });
    }
  
    // ‚Üì  —Ç–æ—Å—Ç –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
    showToast('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!','success');
  
}

function cancelRegistration(eventId){
  registrations=registrations.filter(r=>!(r.eventId===eventId && r.fullName===currentUser.fullName));
  localStorage.setItem('registrations',JSON.stringify(registrations));
  showToast('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞','info');
  renderEventsList();
}
/***** –ê–î–ú–ò–ù‚Äë–º–æ–¥–∞–ª–∫–∞ *****/
function openAdminView(eventId){
  document.getElementById('admin-modal').style.display='flex';
  const list=document.getElementById('admin-registrations');
  list.innerHTML='';
  registrations
    .filter(r=>r.eventId===eventId)
    .forEach((reg,idx)=>{
      const li=document.createElement('li');
      li.innerHTML =
        `${reg.fullName} (${reg.class}) ` +
        (reg.attended
          ? '‚Äî –£—á–∞—Å—Ç–≤–æ–≤–∞–ª ‚úÖ'
          : `<button class="btn-success" onclick="confirmAttendance(${eventId},${idx})">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>`);
      list.appendChild(li);
    });
}
function closeAdminModal(){ document.getElementById('admin-modal').style.display='none'; }

function confirmAttendance(eventId, idx){
  const sameEvt = registrations.filter(r=>r.eventId===eventId);
  const reg     = sameEvt[idx];

  if (!reg.attended) {
    reg.attended = true;
    reg.points   = getEventPoints(eventId);

    /* –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã */
    if (currentUser && reg.fullName === currentUser.fullName) {
      currentUser.points = (currentUser.points || 0) + reg.points;
      localStorage.setItem('userData', JSON.stringify(currentUser));
      updateProfileInfo(currentUser);
      syncCurrentUserWithAllUsers();
    }
    /* –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π */
    const gIdx = registrations.findIndex(r => r.eventId===eventId && r.fullName===reg.fullName);
    registrations[gIdx] = reg;
    localStorage.setItem('registrations', JSON.stringify(registrations));

    openAdminView(eventId);          // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫
  }
}
function getEventPoints(id){
  const ev = events.find(e=>e.id===id);
  return ev ? ev.points : 0;
}

/***** –ê–î–ú–ò–ù: –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ *****/
function addEvent(){
  const title = document.getElementById('newEventTitle').value.trim();
  const desc  = document.getElementById('newEventDescription').value.trim();
  const date  = document.getElementById('newEventDate').value.trim();
  const pts   = parseInt(document.getElementById('newEventPoints').value,10);

  if (!title || !desc || !date || isNaN(pts))
    return showToast('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!','warning');

  const newId = events.length ? Math.max(...events.map(e=>e.id))+1 : 1;
  events.push({id:newId, title, description:desc, date, points:pts});
  localStorage.setItem('events', JSON.stringify(events));

  ['newEventTitle','newEventDescription','newEventDate','newEventPoints']
    .forEach(id => document.getElementById(id).value='');

  renderEventsList();
  showToast('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!','success');
}

/***** –ù–ê–ì–†–ê–î–´ *****/
function renderRewards(){
  const box = document.getElementById('rewards-container');
  box.innerHTML = '';
  rewards.forEach(rw=>{
    const owned  = currentUser?.receivedRewards.includes(rw.id);
    const enough = (currentUser?.points || 0) >= rw.cost;
    const card   = document.createElement('div');
    card.className = 'reward-card';
    card.innerHTML = `
      <div>
        <h3>${rw.title}</h3>
        <div class="cost">${rw.cost}¬†–±–∞–ª–ª–æ–≤</div>
      </div>
      <button class="btn ${owned?'btn-accent':''}" ${enough&&!owned ? '' : 'disabled'}
        onclick="redeemReward(${rw.id})">${owned?'–ü–æ–ª—É—á–µ–Ω–æ':'–ü–æ–ª—É—á–∏—Ç—å'}</button>`;
    box.appendChild(card);
  });
}

function redeemReward(id){
  const reward = rewards.find(r=>r.id===id);
  if (!reward || !currentUser) return;
  if (currentUser.receivedRewards.includes(id))
    return showToast('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ –Ω–∞–≥—Ä–∞–¥–∞','info');
  if ((currentUser.points || 0) < reward.cost)
    return showToast('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤','warning');

  currentUser.points -= reward.cost;
  currentUser.receivedRewards.push(id);
  localStorage.setItem('userData', JSON.stringify(currentUser));
  updateProfileInfo(currentUser);
  syncCurrentUserWithAllUsers();
  renderRewards();
  showToast('–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!','success');
}

/***** –õ–ò–î–ï–†–ë–û–†–î *****/
function renderLeaderboard(){
  const tbody  = document.querySelector('#leaderboard-table tbody');
  tbody.innerHTML = '';
  const sorted = [...allUsers].sort((a,b)=>b.points-a.points);
  sorted.forEach((u,idx)=>{
    const row = document.createElement('tr');
    row.innerHTML =
      `<td>${idx+1}</td><td>${u.fullName}</td><td>${u.class}</td><td>${u.points}</td>`;
    tbody.appendChild(row);
  });
}
function syncCurrentUserWithAllUsers(){
  const idx = allUsers.findIndex(u=>u.fullName===currentUser.fullName && u.class===currentUser.class);
  if (idx>-1) allUsers[idx] = currentUser;
  else        allUsers.push(currentUser);
  localStorage.setItem('allUsers', JSON.stringify(allUsers));
  renderLeaderboard();
}

/***** –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –°–ï–ö–¶–ò–ô *****/
function showSection(sec){
  ['events','profile','rewards','leaderboard','calendar'].forEach(id=>{
    document.getElementById(`${id}-section`).style.display =
      (sec===id ? 'block' : 'none');
  });
  if (sec==='rewards')     renderRewards();
  if (sec==='leaderboard') renderLeaderboard();
}

/***** –°–ë–†–û–° –í–°–ï–• –î–ê–ù–ù–´–• (—Ç–µ—Å—Ç) *****/
function resetAllData(){
  if (confirm('–£–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ?')){
    localStorage.clear();
    location.reload();
  }
}

/***** FIRST RUN *****/
document.addEventListener('DOMContentLoaded', ()=>{
  if (!currentUser)
    document.getElementById('user-info-modal').style.display='flex';
  else
    updateProfileInfo(currentUser);

  renderEventsList();
  renderRewards();
  renderLeaderboard();
  showSection('events');
});
